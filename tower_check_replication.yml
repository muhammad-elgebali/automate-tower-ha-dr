---
- hosts: database_replica
  gather_facts: yes
  become: true
  become_user: postgres
  vars:
    replication_time_threshold: 100
  vars_files: tower_vars.yml
  tasks:
    - name: high level block to determine if db replication is managed by toolkit
      block:

        # get tower postgres role vars
        - name: import postgres role vars
          import_role:
            name: "{{tower_installer_current}}/roles/postgres"
          vars:
            postgres_exec_vars_only: true

        - set_fact:
            pg_bash: ""
          when: pg_bash is not defined

        - name: check replication status and latency
          command: '{{ pg_bash }} psql -U postgres -t -c "select extract(epoch from now() - pg_last_xact_replay_timestamp());"'
          register: replication_latency
          changed_when: false

        - name: extract datetime
          debug:
            msg: "Replication latency is {{ replication_latency.stdout | float }}"
          failed_when: replication_latency.stdout | float > replication_time_threshold

        - name: ensure replica is in recovery mode
          command:  '{{ pg_bash }} psql -U postgres -t -c "select pg_is_in_recovery();"'
          register: recovery_mode
          changed_when: false

        - name: check recovery mode is set to true on replica(s)
          debug:
            msg: "Recovery mode is {{ (recovery_mode.stdout.strip() == 't') | ternary('TRUE', 'FALSE') }}"
          failed_when: recovery_mode.stdout.strip() != 't'

      when: not tower_db_external

- hosts: database
  gather_facts: yes
  become: true
  become_user: postgres
  vars_files: tower_vars.yml
  tasks:
    - name: high level block to determine if db replication is managed by toolkit
      block:

        # get tower postgres role vars
        - name: import postgres role vars
          import_role:
            name: "{{tower_installer_current}}/roles/postgres"
          vars:
            postgres_exec_vars_only: true

        - set_fact:
            pg_bash: ""
          when: pg_bash is not defined

        - name: ensure master is not in recovery mode
          command: '{{ pg_bash }} psql -U postgres -t -c "select pg_is_in_recovery();"'
          register: recovery_mode
          changed_when: false

        - name: check recovery mode is set to false on primary
          debug:
            msg: "Recovery mode is {{ (recovery_mode.stdout.strip() == 't') | ternary('TRUE', 'FALSE') }}"
          failed_when: recovery_mode.stdout.strip() != 'f'
          ignore_errors: yes

        - name: get master db  configured on tower nodes
          command: python2 -c "import postgres; print postgres.DATABASES['default']['HOST']"
          args:
            chdir: /etc/tower/conf.d
          register: master_db
          delegate_to: "{{ groups['tower'][0] }}"
          become_user: root
          changed_when: false

        - name: check configured db for tower nodes
          debug:
            msg: "Configured db is {{ master_db.stdout }}"
          failed_when: pg_host != master_db.stdout

      when: not tower_db_external
...